package com.reactnativejitsimeet;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.util.AttributeSet;
import android.widget.FrameLayout;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

//import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.ReactRootView;
import com.rnimmersive.RNImmersiveModule;

//import org.jitsi.meet.sdk.BaseReactView;
//import org.jitsi.meet.sdk.JitsiMeetViewListener;
//import org.jitsi.meet.sdk.ListenerUtils;
import org.jitsi.meet.sdk.ReactInstanceManagerHolder;
import org.jitsi.meet.sdk.PictureInPictureModule;
import org.jitsi.meet.sdk.log.JitsiMeetLogger;

//import java.lang.reflect.Method;
//import java.util.Map;

//public class RNJitsiMeetView extends BaseReactView<JitsiMeetViewListener> implements RNOngoingConferenceTracker.OngoingConferenceListener {
public class RNJitsiMeetView extends FrameLayout {

  //private static final Map<String, Method> LISTENER_METHODS = ListenerUtils.mapListenerMethods(JitsiMeetViewListener.class);
  /**
   * Background color used by {@code BaseReactView} and the React Native root
   * view.
   */
  private static final int BACKGROUND_COLOR = 0xFF111111;

  //private volatile String url;

  /**
   * React Native root view.
   */
  private ReactRootView reactRootView;

  /**
   * Helper method to recursively merge 2 {@link Bundle} objects representing React Native props.
   *
   * @param a - The first {@link Bundle}.
   * @param b - The second {@link Bundle}.
   * @return The merged {@link Bundle} object.
   */
  private static Bundle mergeProps(@Nullable Bundle a, @Nullable Bundle b) {
    Bundle result = new Bundle();

    if (a == null) {
      if (b != null) {
        result.putAll(b);
      }

      return result;
    }

    if (b == null) {
      result.putAll(a);

      return result;
    }

    // Start by putting all of a in the result.
    result.putAll(a);

    // Iterate over each key in b and override if appropriate.
    for (String key : b.keySet()) {
      Object bValue = b.get(key);
      Object aValue = a.get(key);
      String valueType = bValue.getClass().getSimpleName();

      if (valueType.contentEquals("Boolean")) {
        result.putBoolean(key, (Boolean) bValue);
      } else if (valueType.contentEquals("String")) {
        result.putString(key, (String) bValue);
      } else if (valueType.contentEquals("Bundle")) {
        result.putBundle(key, mergeProps((Bundle) aValue, (Bundle) bValue));
      } else {
        throw new RuntimeException("Unsupported type: " + valueType);
      }
    }

    return result;
  }

  public RNJitsiMeetView(@NonNull Context context) {
    super(context);
    initialize(context);
  }
  public RNJitsiMeetView(Context context, AttributeSet attrs) {
    super(context, attrs);
    initialize(context);
  }
  public RNJitsiMeetView(Context context, AttributeSet attrs, int defStyle) {
    super(context, attrs, defStyle);
    initialize(context);
  }

//  public RNJitsiMeetView(@NonNull Context context) {
//    super(context);
//
//    RNOngoingConferenceTracker.getInstance().addListener(this);
//  }

  /**
   * Releases the React resources (specifically the {@link ReactRootView})
   * associated with this view.
   *
   * MUST be called when the {@link Activity} holding this view is destroyed,
   * typically in the {@code onDestroy} method.
   */
  public void dispose() {
    if (reactRootView != null) {
      removeView(reactRootView);
      reactRootView.unmountReactApplication();
      reactRootView = null;
    }
  }

  /**
   * Enters Picture-In-Picture mode, if possible. This method is designed to
   * be called from the {@code Activity.onUserLeaveHint} method.
   *
   * This is currently not mandatory, but if used will provide automatic
   * handling of the picture in picture mode when user minimizes the app. It
   * will be probably the most useful in case the app is using the welcome
   * page.
   */
 public void enterPictureInPicture() {
   PictureInPictureModule pipModule
     = ReactInstanceManagerHolder.getNativeModule(
     PictureInPictureModule.class);
   if (pipModule != null
     && pipModule.isPictureInPictureSupported()
     && !JitsiMeetActivityDelegate.arePermissionsBeingRequested()) {
     try {
       pipModule.enterPictureInPicture();
     } catch (RuntimeException re) {
       JitsiMeetLogger.e(re, "Failed to enter PiP mode");
     }
   }
 }
  // public void enterPictureInPicture() {
  //   JitsiMeetLogger.e("PiP not supported");
  // }

  /**
   * Joins the conference specified by the given {@link JitsiMeetConferenceOptions}. If there is
   * already an active conference, it will be left and the new one will be joined.
   * @param options - Description of what conference must be joined and what options will be used
   *                when doing so.
   */
  public void join(@Nullable RNJitsiMeetConferenceOptions options) {
    setProps(options != null ? options.asProps() : new Bundle());
  }

  /**
   * Creates the {@code ReactRootView} for the given app name with the given
   * props. Once created it's set as the view of this {@code FrameLayout}.
   *
   * @param appName - The name of the "app" (in React Native terms) to load.
   * @param props - The React Component props to pass to the app.
   */
  private void createReactRootView(String appName, @Nullable Bundle props) {
    if (props == null) {
      props = new Bundle();
    }

    if (reactRootView == null) {
      reactRootView = new ReactRootView(getContext());
      reactRootView.startReactApplication(
        ReactInstanceManagerHolder.getReactInstanceManager(),
        appName,
        props);
      reactRootView.setBackgroundColor(BACKGROUND_COLOR);
      addView(reactRootView);
    } else {
      reactRootView.setAppProperties(props);
    }
  }

  private void initialize(@NonNull Context context) {
    // Check if the parent Activity implements JitsiMeetActivityInterface,
    // otherwise things may go wrong.
    if (!(context instanceof JitsiMeetActivityInterface)) {
      throw new RuntimeException("Enclosing Activity must implement JitsiMeetActivityInterface");
    }

    setBackgroundColor(BACKGROUND_COLOR);

    ReactInstanceManagerHolder.initReactInstanceManager((Activity) context);
  }

//  public void leave() {
//    setProps(new Bundle());
//  }

  // private void setProps(@NonNull Bundle newProps) {
  //   Bundle props = mergeProps(new Bundle(), newProps);

  //   props.putLong("timestamp", System.currentTimeMillis());

  //   createReactRootView("App", props);
  // }

//  @Override
//  public void onCurrentConferenceChanged(String conferenceUrl) {
//    this.url = conferenceUrl;
//  }

//  @Override
//  @Deprecated
//  protected void onExternalAPIEvent(String name, ReadableMap data) {
//    onExternalAPIEvent(LISTENER_METHODS, name, data);
//  }

  @Override
  protected void onDetachedFromWindow() {
    dispose();
    super.onDetachedFromWindow();
  }

  /**
   * Called when the window containing this view gains or loses focus.
   *
   * @param hasFocus If the window of this view now has focus, {@code true};
   * otherwise, {@code false}.
   */
  @Override
  public void onWindowFocusChanged(boolean hasFocus) {
    super.onWindowFocusChanged(hasFocus);

    // https://github.com/mockingbot/react-native-immersive#restore-immersive-state
    RNImmersiveModule immersive = RNImmersiveModule.getInstance();

    if (hasFocus && immersive != null) {
      immersive.emitImmersiveStateChangeEvent();
    }
  }
}
